{% comment %}
  Nightmare Racing - Mobile & Tablet Enhanced JavaScript for Shopify
  This file should be included in your theme's assets folder as 'nightmare-racing.js.liquid'
  Usage: {{ 'nightmare-racing.js' | asset_url | script_tag }}
{% endcomment %}

{% liquid
  assign shop_name = shop.name | default: 'Nightmare Racing'
  assign phone_number = settings.phone_number | default: '(555) 123-RACE'
  assign contact_email = settings.contact_email | default: 'info@nightmareracing.com'
  assign enable_parallax = settings.enable_parallax | default: true
  assign mobile_menu_style = settings.mobile_menu_style | default: 'slide'
%}

document.addEventListener('DOMContentLoaded', function() {
    
    // ================================
    // SHOPIFY LIQUID VARIABLES
    // ================================
    
    const shopifyConfig = {
        shopName: {{ shop_name | json }},
        phoneNumber: {{ phone_number | json }},
        contactEmail: {{ contact_email | json }},
        enableParallax: {{ enable_parallax | json }},
        mobileMenuStyle: {{ mobile_menu_style | json }},
        cartUrl: {{ routes.cart_url | json }},
        searchUrl: {{ routes.search_url | json }},
        accountUrl: {{ routes.account_url | json }},
        currency: {{ shop.currency | json }},
        moneyFormat: {{ shop.money_format | json }},
        {% if request.design_mode %}
        designMode: true,
        {% else %}
        designMode: false,
        {% endif %}
        {% if customer %}
        customer: {
            id: {{ customer.id | json }},
            firstName: {{ customer.first_name | json }},
            email: {{ customer.email | json }}
        },
        {% else %}
        customer: null,
        {% endif %}
        collections: [
            {% for collection in collections %}
            {
                id: {{ collection.id | json }},
                handle: {{ collection.handle | json }},
                title: {{ collection.title | json }},
                url: {{ collection.url | json }}
            }{% unless forloop.last %},{% endunless %}
            {% endfor %}
        ]
    };
    
    // ================================
    // HERO SECTION HEIGHT MATCHING
    // ================================
    
    function matchHeroHeights() {
        const heroText = document.querySelector('.hero-text');
        const heroImageContainer = document.querySelector('.hero-image-container');
        
        if (heroText && heroImageContainer && window.innerWidth > 768) {
            // Reset heights first
            heroImageContainer.style.height = 'auto';
            
            // Get the natural height of the text section
            const textHeight = heroText.offsetHeight;
            
            // Set the image container to match
            heroImageContainer.style.height = textHeight + 'px';
            heroImageContainer.style.minHeight = Math.max(textHeight, 500) + 'px';
            
            // Ensure images scale proportionally
            const heroImages = heroImageContainer.querySelectorAll('.hero-image');
            heroImages.forEach(img => {
                img.style.height = Math.min(textHeight * 0.85, 600) + 'px';
            });
        } else if (heroImageContainer && window.innerWidth <= 768) {
            // Reset for mobile
            heroImageContainer.style.height = '300px';
            heroImageContainer.style.minHeight = 'auto';
            
            const heroImages = heroImageContainer.querySelectorAll('.hero-image');
            heroImages.forEach(img => {
                img.style.height = '100%';
            });
        }
    }
    
    // ================================
    // MOBILE NAVIGATION FUNCTIONALITY
    // ================================
    
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');
    let mobileMenu = null;
    let mobileMenuOverlay = null;
    let mobileMenuClose = null;
    let mobileNavLinks = null;
    
    // Create mobile menu overlay and menu
    function createMobileMenu() {
        // Create overlay
        mobileMenuOverlay = document.createElement('div');
        mobileMenuOverlay.className = 'mobile-menu-overlay';
        document.body.appendChild(mobileMenuOverlay);
        
        // Create mobile menu with Shopify navigation
        mobileMenu = document.createElement('div');
        mobileMenu.className = 'mobile-menu';
        
        // Build navigation from Shopify collections and pages
        let navigationHTML = '';
        
        {% if linklists.main-menu.links.size > 0 %}
            {% for link in linklists.main-menu.links %}
                navigationHTML += '<li><a href="{{ link.url }}">{{ link.title }}</a></li>';
                {% if link.links.size > 0 %}
                    {% for sublink in link.links %}
                        navigationHTML += '<li class="sub-link"><a href="{{ sublink.url }}">{{ sublink.title }}</a></li>';
                    {% endfor %}
                {% endif %}
            {% endfor %}
        {% else %}
            // Fallback navigation
            navigationHTML = `
                <li><a href="{{ routes.root_url }}">Home</a></li>
                <li><a href="{{ collections.all.url }}">Shop</a></li>
                {% for collection in collections limit: 4 %}
                <li><a href="{{ collection.url }}">{{ collection.title }}</a></li>
                {% endfor %}
                <li><a href="{{ pages.contact.url | default: '/pages/contact' }}">Contact</a></li>
            `;
        {% endif %}
        
        mobileMenu.innerHTML = `
            <div class="mobile-menu-content">
                <div class="mobile-menu-header">
                    <h2>${shopifyConfig.shopName.toUpperCase().replace(' ', ' <span class="text-accent">')}</span></h2>
                    <button class="mobile-menu-close">&times;</button>
                </div>
                <ul class="mobile-nav-links">
                    ${navigationHTML}
                </ul>
                <div class="mobile-menu-footer">
                    <p>📞 ${shopifyConfig.phoneNumber}</p>
                    <p>📧 ${shopifyConfig.contactEmail}</p>
                    {% if customer %}
                    <div class="mobile-menu-customer">
                        <p>👋 Hello, {{ customer.first_name }}!</p>
                        <a href="{{ routes.account_url }}" class="customer-link">My Account</a>
                        <a href="{{ routes.account_logout_url }}" class="logout-link">Logout</a>
                    </div>
                    {% else %}
                    <div class="mobile-menu-auth">
                        <a href="{{ routes.account_login_url }}" class="auth-link">Login</a>
                        <a href="{{ routes.account_register_url }}" class="auth-link">Register</a>
                    </div>
                    {% endif %}
                </div>
            </div>
        `;
        document.body.appendChild(mobileMenu);
        
        // Now get references to the created elements
        mobileMenuClose = mobileMenu.querySelector('.mobile-menu-close');
        mobileNavLinks = mobileMenu.querySelectorAll('.mobile-nav-links a');
        
        // Add event listeners
        setupMobileMenuEvents();
    }
    
    // Setup mobile menu event listeners
    function setupMobileMenuEvents() {
        if (hamburger) {
            hamburger.addEventListener('click', toggleMobileMenu);
        }
        
        if (mobileMenuClose) {
            mobileMenuClose.addEventListener('click', closeMobileMenu);
        }
        
        // Close menu when clicking on overlay
        if (mobileMenuOverlay) {
            mobileMenuOverlay.addEventListener('click', closeMobileMenu);
        }
        
        // Close menu when clicking nav links
        if (mobileNavLinks) {
            mobileNavLinks.forEach(link => {
                link.addEventListener('click', closeMobileMenu);
            });
        }
        
        // Touch gestures for mobile menu
        setupTouchGestures();
    }
    
    // Toggle mobile menu
    function toggleMobileMenu() {
        if (!mobileMenu) return;
        
        hamburger.classList.toggle('active');
        mobileMenu.classList.toggle('active');
        mobileMenuOverlay.classList.toggle('active');
        document.body.classList.toggle('menu-open');
        
        // Track mobile menu opens in Shopify analytics
        if (typeof gtag !== 'undefined') {
            gtag('event', 'mobile_menu_toggle', {
                event_category: 'engagement',
                event_label: 'mobile_navigation'
            });
        }
    }
    
    // Close mobile menu
    function closeMobileMenu() {
        if (!mobileMenu) return;
        
        hamburger.classList.remove('active');
        mobileMenu.classList.remove('active');
        mobileMenuOverlay.classList.remove('active');
        document.body.classList.remove('menu-open');
    }
    
    // Initialize mobile menu
    createMobileMenu();
    
    // ================================
    // SHOPIFY CART FUNCTIONALITY
    // ================================
    
    function addToCart(variantId, quantity = 1) {
        const formData = {
            'items': [{
                'id': variantId,
                'quantity': quantity
            }]
        };
        
        fetch('/cart/add.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            // Update cart count
            updateCartCount();
            // Show success message
            showCartNotification('Product added to cart!');
            
            // Track add to cart event
            if (typeof gtag !== 'undefined') {
                gtag('event', 'add_to_cart', {
                    currency: shopifyConfig.currency,
                    value: data.price / 100,
                    items: [{
                        item_id: data.variant_id,
                        item_name: data.product_title,
                        quantity: quantity
                    }]
                });
            }
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
            showCartNotification('Error adding product to cart', 'error');
        });
    }
    
    function updateCartCount() {
        fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
            const cartCountElements = document.querySelectorAll('.cart-count');
            cartCountElements.forEach(element => {
                element.textContent = cart.item_count;
                element.style.display = cart.item_count > 0 ? 'block' : 'none';
            });
        });
    }
    
    function showCartNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `cart-notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-message">${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Show notification
        setTimeout(() => notification.classList.add('show'), 100);
        
        // Auto hide after 3 seconds
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
        
        // Manual close
        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        });
    }
    
    // ================================
    // PRODUCT QUICK VIEW FUNCTIONALITY
    // ================================
    
    function openQuickView(productHandle) {
        fetch(`/products/${productHandle}.js`)
        .then(response => response.json())
        .then(product => {
            createQuickViewModal(product);
        })
        .catch(error => {
            console.error('Error fetching product:', error);
        });
    }
    
    function createQuickViewModal(product) {
        const modal = document.createElement('div');
        modal.className = 'quick-view-modal';
        modal.innerHTML = `
            <div class="quick-view-overlay"></div>
            <div class="quick-view-content">
                <button class="quick-view-close">&times;</button>
                <div class="quick-view-product">
                    <div class="quick-view-images">
                        <img src="${product.featured_image}" alt="${product.title}" class="main-image">
                    </div>
                    <div class="quick-view-details">
                        <h2 class="product-title">${product.title}</h2>
                        <div class="product-price">${formatMoney(product.price)}</div>
                        <div class="product-description">${product.description}</div>
                        <form class="product-form">
                            <select class="variant-select">
                                ${product.variants.map(variant => 
                                    `<option value="${variant.id}" ${!variant.available ? 'disabled' : ''}>
                                        ${variant.title} - ${formatMoney(variant.price)}
                                        ${!variant.available ? ' (Sold Out)' : ''}
                                    </option>`
                                ).join('')}
                            </select>
                            <button type="submit" class="add-to-cart-btn btn btn-primary">
                                Add to Cart
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Show modal
        setTimeout(() => modal.classList.add('show'), 100);
        
        // Event listeners
        modal.querySelector('.quick-view-close').addEventListener('click', closeQuickView);
        modal.querySelector('.quick-view-overlay').addEventListener('click', closeQuickView);
        modal.querySelector('.product-form').addEventListener('submit', handleQuickViewAddToCart);
        
        function closeQuickView() {
            modal.classList.remove('show');
            setTimeout(() => modal.remove(), 300);
        }
        
        function handleQuickViewAddToCart(e) {
            e.preventDefault();
            const variantId = modal.querySelector('.variant-select').value;
            addToCart(parseInt(variantId));
            closeQuickView();
        }
    }
    
    function formatMoney(cents) {
        return (cents / 100).toLocaleString('en-US', {
            style: 'currency',
            currency: shopifyConfig.currency
        });
    }
    
    // ================================
    // TOUCH GESTURES FOR MOBILE
    // ================================
    
    let touchStartX = 0;
    let touchStartY = 0;
    
    function setupTouchGestures() {
        if (!mobileMenu) return;
        
        // Swipe to close mobile menu
        mobileMenu.addEventListener('touchstart', function(e) {
            touchStartX = e.changedTouches[0].screenX;
            touchStartY = e.changedTouches[0].screenY;
        }, { passive: true });
        
        mobileMenu.addEventListener('touchend', function(e) {
            const touchEndX = e.changedTouches[0].screenX;
            const touchEndY = e.changedTouches[0].screenY;
            const deltaX = touchEndX - touchStartX;
            const deltaY = touchEndY - touchStartY;
            
            // Swipe right to close menu (minimum 100px swipe)
            if (deltaX > 100 && Math.abs(deltaY) < 100) {
                closeMobileMenu();
            }
        }, { passive: true });
        
        // Also allow swipe left from edge to open menu
        document.addEventListener('touchstart', function(e) {
            if (e.touches[0].clientX < 20 && !mobileMenu.classList.contains('active')) {
                touchStartX = e.touches[0].screenX;
                touchStartY = e.touches[0].screenY;
            }
        }, { passive: true });
        
        document.addEventListener('touchend', function(e) {
            if (e.changedTouches[0].clientX > 100 && touchStartX < 20 && !mobileMenu.classList.contains('active')) {
                const deltaX = e.changedTouches[0].screenX - touchStartX;
                const deltaY = e.changedTouches[0].screenY - touchStartY;
                
                if (deltaX > 100 && Math.abs(deltaY) < 100) {
                    toggleMobileMenu();
                }
            }
        }, { passive: true });
    }
    
    // ================================
    // RESPONSIVE VIEWPORT HANDLING
    // ================================
    
    function handleViewportChanges() {
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
        
        // Match hero heights on viewport change
        matchHeroHeights();
    }
    
    handleViewportChanges();
    window.addEventListener('resize', handleViewportChanges);
    
    // Handle orientation changes on mobile
    window.addEventListener('orientationchange', function() {
        setTimeout(() => {
            handleViewportChanges();
            matchHeroHeights();
        }, 500);
        // Close mobile menu on orientation change
        if (mobileMenu && mobileMenu.classList.contains('active')) {
            closeMobileMenu();
        }
    });
    
    // ================================
    // SMOOTH SCROLLING NAVIGATION
    // ================================
    
    function smoothScroll(target) {
        const element = document.querySelector(target);
        if (element) {
            const offsetTop = element.offsetTop - 70; // Account for fixed navbar
            window.scrollTo({
                top: offsetTop,
                behavior: 'smooth'
            });
        }
    }
    
    // Add smooth scrolling to all navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const target = this.getAttribute('href');
            if (target && target !== '#') {
                smoothScroll(target);
            }
        });
    });
    
    // ================================
    // DYNAMIC CONTENT SIZING
    // ================================
    
    function adjustContentSizing() {
        const screenWidth = window.innerWidth;
        const hero = document.querySelector('.hero');
        
        // Adjust hero section for different screen sizes
        if (hero) {
            if (screenWidth <= 768) {
                hero.style.paddingTop = '70px';
                hero.style.minHeight = 'calc(100vh - 0px)';
            } else {
                hero.style.paddingTop = '70px';
                hero.style.minHeight = '100vh';
            }
        }
        
        // Update hero heights
        matchHeroHeights();
    }
    
    adjustContentSizing();
    
    // ================================
    // NAVBAR SCROLL BEHAVIOR
    // ================================
    
    let lastScrollTop = 0;
    const navbar = document.querySelector('.navbar');
    
    function handleNavbarScroll() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        
        if (!navbar) return;
        
        // Add background opacity on scroll
        if (scrollTop > 50) {
            navbar.style.background = 'rgba(10, 10, 10, 0.98)';
            navbar.style.backdropFilter = 'blur(15px)';
        } else {
            navbar.style.background = 'rgba(10, 10, 10, 0.95)';
            navbar.style.backdropFilter = 'blur(10px)';
        }
        
        // Hide/show navbar on mobile when scrolling down/up
        if (window.innerWidth <= 768) {
            if (scrollTop > lastScrollTop && scrollTop > 100) {
                // Scrolling down - hide navbar
                navbar.style.transform = 'translateY(-100%)';
            } else {
                // Scrolling up - show navbar
                navbar.style.transform = 'translateY(0)';
            }
        } else {
            navbar.style.transform = 'translateY(0)';
        }
        
        lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
    }
    
    // Throttled scroll event
    let ticking = false;
    window.addEventListener('scroll', function() {
        if (!ticking) {
            requestAnimationFrame(function() {
                handleNavbarScroll();
                ticking = false;
            });
            ticking = true;
        }
    });
    
    // ================================
    // SHOPIFY FORM HANDLING
    // ================================
    
    // Newsletter signup form
    const newsletterForms = document.querySelectorAll('.newsletter-form');
    newsletterForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const email = this.querySelector('input[type="email"]').value;
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            submitBtn.textContent = 'SUBSCRIBING...';
            submitBtn.disabled = true;
            
            // Shopify customer creation for newsletter
            fetch('/contact', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    'form_type': 'customer',
                    'utf8': '✓',
                    'customer[email]': email,
                    'customer[tags]': 'newsletter'
                })
            })
            .then(response => {
                if (response.ok) {
                    submitBtn.textContent = 'SUBSCRIBED!';
                    submitBtn.style.background = '#28a745';
                    this.reset();
                    showCartNotification('Successfully subscribed to newsletter!');
                } else {
                    throw new Error('Subscription failed');
                }
            })
            .catch(error => {
                console.error('Newsletter signup error:', error);
                submitBtn.textContent = 'ERROR - TRY AGAIN';
                submitBtn.style.background = '#dc3545';
                showCartNotification('Newsletter signup failed. Please try again.', 'error');
            })
            .finally(() => {
                setTimeout(() => {
                    submitBtn.textContent = originalText;
                    submitBtn.disabled = false;
                    submitBtn.style.background = '';
                }, 3000);
            });
        });
    });
    
    // Contact form handling
    const contactForm = document.querySelector('.contact-form form');
    const formInputs = document.querySelectorAll('.form-group input, .form-group select, .form-group textarea');
    
    // Improve form experience on mobile
    formInputs.forEach(input => {
        // Add focus styles for better mobile UX
        input.addEventListener('focus', function() {
            this.parentElement.classList.add('focused');
        });
        
        input.addEventListener('blur', function() {
            if (!this.value) {
                this.parentElement.classList.remove('focused');
            }
        });
        
        // Keep focused class if input has value
        input.addEventListener('input', function() {
            if (this.value) {
                this.parentElement.classList.add('focused');
            } else {
                this.parentElement.classList.remove('focused');
            }
        });
        
        // Auto-resize textarea on mobile
        if (input.tagName === 'TEXTAREA') {
            input.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = this.scrollHeight + 'px';
            });
        }
    });
    
    // Contact form submission handling
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            formData.append('form_type', 'contact');
            formData.append('utf8', '✓');
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            if (submitBtn) {
                const originalText = submitBtn.textContent;
                submitBtn.textContent = 'SENDING...';
                submitBtn.disabled = true;
                submitBtn.style.opacity = '0.7';
                
                fetch('/contact', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        submitBtn.textContent = 'MESSAGE SENT!';
                        submitBtn.style.background = '#28a745';
                        submitBtn.style.opacity = '1';
                        this.reset();
                        showCartNotification('Message sent successfully!');
                        
                        // Track form submission
                        if (typeof gtag !== 'undefined') {
                            gtag('event', 'form_submit', {
                                event_category: 'engagement',
                                event_label: 'contact_form'
                            });
                        }
                    } else {
                        throw new Error('Form submission failed');
                    }
                })
                .catch(error => {
                    console.error('Form submission error:', error);
                    submitBtn.textContent = 'ERROR - TRY AGAIN';
                    submitBtn.style.background = '#dc3545';
                    showCartNotification('Message failed to send. Please try again.', 'error');
                })
                .finally(() => {
                    // Reset after 3 seconds
                    setTimeout(() => {
                        submitBtn.textContent = originalText;
                        submitBtn.disabled = false;
                        submitBtn.style.background = '';
                        submitBtn.style.opacity = '1';
                        // Remove focused classes
                        formInputs.forEach(input => {
                            if (!input.value) {
                                input.parentElement.classList.remove('focused');
                            }
                        });
                    }, 3000);
                });
            }
        });
    }
    
    // ================================
    // LOADING ANIMATIONS
    // ================================
    
    // Intersection Observer for scroll animations
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
                // Add small delay for staggered effect
                const delay = Math.random() * 0.2;
                entry.target.style.animationDelay = `${delay}s`;
            }
        });
    }, observerOptions);
    
    // Observe elements for animation
    const animateElements = document.querySelectorAll('.service-card, .car-card, .category-card, .product-card, .collection-card');
    animateElements.forEach(el => {
        observer.observe(el);
    });
    
    // ================================
    // TOUCH FEEDBACK
    // ================================
    
    // Add touch feedback to buttons and cards
    const touchElements = document.querySelectorAll('.btn, .service-card, .car-card, .category-card, .product-card, .collection-card');
    
    touchElements.forEach(element => {
        element.addEventListener('touchstart', function() {
            this.classList.add('touch-active');
        }, { passive: true });
        
        element.addEventListener('touchend', function() {
            setTimeout(() => {
                this.classList.remove('touch-active');
            }, 150);
        }, { passive: true });
        
        element.addEventListener('touchcancel', function() {
            this.classList.remove('touch-active');
        }, { passive: true });
    });
    
    // ================================
    // ACCESSIBILITY IMPROVEMENTS
    // ================================
    
    // Keyboard navigation for mobile menu
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && mobileMenu && mobileMenu.classList.contains('active')) {
            closeMobileMenu();
        }
        
        // Tab navigation through mobile menu
        if (e.key === 'Tab' && mobileMenu && mobileMenu.classList.contains('active')) {
            const focusableElements = mobileMenu.querySelectorAll('a, button');
            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];
            
            if (e.shiftKey) {
                if (document.activeElement === firstElement) {
                    e.preventDefault();
                    lastElement.focus();
                }
            } else {
                if (document.activeElement === lastElement) {
                    e.preventDefault();
                    firstElement.focus();
                }
            }
        }
    });
    
    // Focus management
    if (mobileMenu) {
        mobileMenu.addEventListener('transitionend', function() {
            if (this.classList.contains('active')) {
                const firstLink = this.querySelector('.mobile-nav-links a');
                if (firstLink) firstLink.focus();
            }
        });
    }
    
    // ================================
    // ENHANCED PRODUCT INTERACTIONS
    // ================================
    
    // Product card interactions with Shopify integration
    const productCards = document.querySelectorAll('.product-card');
    productCards.forEach(card => {
        const productHandle = card.dataset.productHandle;
        const quickViewBtn = card.querySelector('.quick-view-btn');
        const addToCartBtn = card.querySelector('.add-to-cart-btn');
        
        if (quickViewBtn && productHandle) {
            quickViewBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                openQuickView(productHandle);
            });
        }
        
        if (addToCartBtn) {
            addToCartBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                const variantId = this.dataset.variantId;
                if (variantId) {
                    addToCart(parseInt(variantId));
                }
            });
        }
        
        // Card hover effects
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
    
    // Collection card interactions
    const collectionCards = document.querySelectorAll('.collection-card');
    collectionCards.forEach(card => {
        const collectionUrl = card.dataset.collectionUrl;
        
        card.addEventListener('click', function() {
            if (collectionUrl) {
                window.location.href = collectionUrl;
            }
        });
    });
    
    // Service card interactions
    const serviceCards = document.querySelectorAll('.service-card');
    serviceCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
        
        card.addEventListener('click', function() {
            const serviceType = this.dataset.serviceType;
            if (serviceType) {
                // Track service interest
                if (typeof gtag !== 'undefined') {
                    gtag('event', 'service_interest', {
                        event_category: 'engagement',
                        event_label: serviceType
                    });
                }
                // Scroll to contact form or open service booking
                smoothScroll('#contact');
            }
        });
    });
    
    // Hero button interactions with Shopify routing
    const heroButtons = document.querySelectorAll('.hero-buttons .btn');
    heroButtons.forEach(button => {
        button.addEventListener('click', function() {
            const buttonText = this.textContent.toLowerCase();
            const buttonAction = this.dataset.action;
            
            if (buttonAction === 'shop' || buttonText.includes('shop')) {
                window.location.href = shopifyConfig.searchUrl || '/collections/all';
            } else if (buttonAction === 'services' || buttonText.includes('service')) {
                smoothScroll('#contact');
            } else if (buttonAction === 'parts' || buttonText.includes('parts')) {
                // Navigate to parts collection
                const partsCollection = shopifyConfig.collections.find(col => 
                    col.handle.includes('parts') || col.handle.includes('accessories')
                );
                if (partsCollection) {
                    window.location.href = partsCollection.url;
                } else {
                    smoothScroll('#parts');
                }
            }
        });
    });
    
    // ================================
    // SEARCH FUNCTIONALITY
    // ================================
    
    const searchForms = document.querySelectorAll('.search-form');
    const searchInputs = document.querySelectorAll('.search-input');
    
    searchForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const query = this.querySelector('.search-input').value.trim();
            
            if (query) {
                // Track search
                if (typeof gtag !== 'undefined') {
                    gtag('event', 'search', {
                        search_term: query
                    });
                }
                
                // Redirect to search results
                window.location.href = `${shopifyConfig.searchUrl}?q=${encodeURIComponent(query)}`;
            }
        });
    });
    
    // Search autocomplete functionality
    searchInputs.forEach(input => {
        let searchTimeout;
        
        input.addEventListener('input', function() {
            const query = this.value.trim();
            
            clearTimeout(searchTimeout);
            
            if (query.length >= 2) {
                searchTimeout = setTimeout(() => {
                    fetchSearchSuggestions(query, this);
                }, 300);
            } else {
                hideSearchSuggestions();
            }
        });
        
        input.addEventListener('blur', function() {
            // Hide suggestions after a delay to allow clicking
            setTimeout(hideSearchSuggestions, 200);
        });
    });
    
    function fetchSearchSuggestions(query, inputElement) {
        fetch(`/search/suggest.json?q=${encodeURIComponent(query)}&resources[type]=product&resources[limit]=5`)
        .then(response => response.json())
        .then(data => {
            showSearchSuggestions(data.resources.results.products, inputElement);
        })
        .catch(error => {
            console.error('Search suggestions error:', error);
        });
    }
    
    function showSearchSuggestions(products, inputElement) {
        hideSearchSuggestions();
        
        if (!products || products.length === 0) return;
        
        const suggestions = document.createElement('div');
        suggestions.className = 'search-suggestions';
        suggestions.innerHTML = products.map(product => `
            <div class="search-suggestion" data-product-url="${product.url}">
                <img src="${product.featured_image}" alt="${product.title}" class="suggestion-image">
                <div class="suggestion-details">
                    <h4 class="suggestion-title">${product.title}</h4>
                    <span class="suggestion-price">${formatMoney(product.price)}</span>
                </div>
            </div>
        `).join('');
        
        // Position suggestions below input
        const inputRect = inputElement.getBoundingClientRect();
        suggestions.style.position = 'absolute';
        suggestions.style.top = (inputRect.bottom + window.scrollY) + 'px';
        suggestions.style.left = inputRect.left + 'px';
        suggestions.style.width = inputRect.width + 'px';
        
        document.body.appendChild(suggestions);
        
        // Add click handlers
        suggestions.querySelectorAll('.search-suggestion').forEach(suggestion => {
            suggestion.addEventListener('click', function() {
                window.location.href = this.dataset.productUrl;
            });
        });
        
        // Show with animation
        setTimeout(() => suggestions.classList.add('show'), 10);
    }
    
    function hideSearchSuggestions() {
        const existingSuggestions = document.querySelector('.search-suggestions');
        if (existingSuggestions) {
            existingSuggestions.classList.remove('show');
            setTimeout(() => existingSuggestions.remove(), 200);
        }
    }
    
    // ================================
    // WISHLIST FUNCTIONALITY
    // ================================
    
    let wishlist = JSON.parse(localStorage.getItem('nightmare_racing_wishlist') || '[]');
    
    function addToWishlist(productId, productTitle, productImage, productPrice) {
        const item = {
            id: productId,
            title: productTitle,
            image: productImage,
            price: productPrice,
            dateAdded: new Date().toISOString()
        };
        
        const existingIndex = wishlist.findIndex(item => item.id === productId);
        
        if (existingIndex === -1) {
            wishlist.push(item);
            localStorage.setItem('nightmare_racing_wishlist', JSON.stringify(wishlist));
            showCartNotification('Added to wishlist!');
            updateWishlistUI();
            
            // Track wishlist addition
            if (typeof gtag !== 'undefined') {
                gtag('event', 'add_to_wishlist', {
                    currency: shopifyConfig.currency,
                    value: productPrice / 100,
                    items: [{
                        item_id: productId,
                        item_name: productTitle,
                        quantity: 1
                    }]
                });
            }
        } else {
            showCartNotification('Already in wishlist!', 'info');
        }
    }
    
    function removeFromWishlist(productId) {
        wishlist = wishlist.filter(item => item.id !== productId);
        localStorage.setItem('nightmare_racing_wishlist', JSON.stringify(wishlist));
        updateWishlistUI();
        showCartNotification('Removed from wishlist!');
    }
    
    function updateWishlistUI() {
        const wishlistCount = document.querySelector('.wishlist-count');
        const wishlistButtons = document.querySelectorAll('.wishlist-btn');
        
        if (wishlistCount) {
            wishlistCount.textContent = wishlist.length;
            wishlistCount.style.display = wishlist.length > 0 ? 'block' : 'none';
        }
        
        wishlistButtons.forEach(btn => {
            const productId = btn.dataset.productId;
            const isInWishlist = wishlist.some(item => item.id === productId);
            btn.classList.toggle('active', isInWishlist);
            btn.querySelector('.wishlist-icon').textContent = isInWishlist ? '❤️' : '🤍';
        });
    }
    
    // Initialize wishlist UI
    updateWishlistUI();
    
    // Wishlist button event listeners
    document.addEventListener('click', function(e) {
        if (e.target.closest('.wishlist-btn')) {
            e.preventDefault();
            e.stopPropagation();
            
            const btn = e.target.closest('.wishlist-btn');
            const productId = btn.dataset.productId;
            const productTitle = btn.dataset.productTitle;
            const productImage = btn.dataset.productImage;
            const productPrice = parseInt(btn.dataset.productPrice);
            
            const isInWishlist = wishlist.some(item => item.id === productId);
            
            if (isInWishlist) {
                removeFromWishlist(productId);
            } else {
                addToWishlist(productId, productTitle, productImage, productPrice);
            }
        }
    });
    
    // ================================
    // DEVICE DETECTION & OPTIMIZATION
    // ================================
    
    function detectDevice() {
        const isMobile = window.innerWidth <= 768;
        const isTablet = window.innerWidth > 768 && window.innerWidth <= 1024;
        const isDesktop = window.innerWidth > 1024;
        
        document.body.classList.toggle('is-mobile', isMobile);
        document.body.classList.toggle('is-tablet', isTablet);
        document.body.classList.toggle('is-desktop', isDesktop);
        
        // Optimize animations for mobile devices
        if (isMobile) {
            document.body.classList.add('reduce-motion');
        } else {
            document.body.classList.remove('reduce-motion');
        }
        
        // Adjust content sizing
        adjustContentSizing();
        
        // Update hero heights
        matchHeroHeights();
        
        // Update cart initialization
        updateCartCount();
    }
    
    // Debounce function for resize events
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    // Initialize device detection
    detectDevice();
    
    // Optimized resize handler
    const optimizedResize = debounce(() => {
        detectDevice();
        handleViewportChanges();
        matchHeroHeights();
        
        // Close mobile menu on resize to desktop
        if (window.innerWidth > 768 && mobileMenu && mobileMenu.classList.contains('active')) {
            closeMobileMenu();
        }
        
        // Hide search suggestions on resize
        hideSearchSuggestions();
    }, 250);
    
    window.addEventListener('resize', optimizedResize);
    
    // ================================
    // PERFORMANCE OPTIMIZATIONS
    // ================================
    
    // Lazy loading for background images and product images
    function lazyLoadImages() {
        const images = document.querySelectorAll('[data-bg], img[data-src]');
        
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        
                        if (img.dataset.bg) {
                            img.style.backgroundImage = `url(${img.dataset.bg})`;
                        }
                        
                        if (img.dataset.src) {
                            img.src = img.dataset.src;
                            img.removeAttribute('data-src');
                        }
                        
                        img.classList.remove('lazy');
                        imageObserver.unobserve(img);
                    }
                });
            });
            
            images.forEach(img => imageObserver.observe(img));
        } else {
            // Fallback for older browsers
            images.forEach(img => {
                if (img.dataset.bg) {
                    img.style.backgroundImage = `url(${img.dataset.bg})`;
                }
                if (img.dataset.src) {
                    img.src = img.dataset.src;
                }
            });
        }
    }
    
    // Initialize lazy loading
    lazyLoadImages();
    
    // ================================
    // PARALLAX EFFECTS
    // ================================
    
    // Parallax effect for hero section (configurable via Shopify settings)
    function handleParallax() {
        if (!shopifyConfig.enableParallax || window.innerWidth <= 768) return;
        
        const scrolled = window.pageYOffset;
        const hero = document.querySelector('.hero');
        const heroImages = document.querySelectorAll('.hero-image');
        
        if (hero && scrolled < window.innerHeight) {
            const rate = scrolled * -0.1;
            heroImages.forEach((img, index) => {
                img.style.transform = `translateY(${rate * (index + 1) * 0.3}px)`;
            });
        }
    }
    
    // Add parallax to scroll event (throttled)
    let parallaxTicking = false;
    window.addEventListener('scroll', function() {
        if (!parallaxTicking) {
            requestAnimationFrame(function() {
                handleParallax();
                parallaxTicking = false;
            });
            parallaxTicking = true;
        }
    });
    
    // ================================
    // SHOPIFY AJAX CART DRAWER
    // ================================
    
    function createCartDrawer() {
        const cartDrawer = document.createElement('div');
        cartDrawer.className = 'cart-drawer';
        cartDrawer.innerHTML = `
            <div class="cart-drawer-overlay"></div>
            <div class="cart-drawer-content">
                <div class="cart-drawer-header">
                    <h3>Shopping Cart</h3>
                    <button class="cart-drawer-close">&times;</button>
                </div>
                <div class="cart-drawer-items"></div>
                <div class="cart-drawer-footer">
                    <div class="cart-total"></div>
                    <div class="cart-actions">
                        <a href="${shopifyConfig.cartUrl}" class="btn btn-secondary">View Cart</a>
                        <button class="btn btn-primary checkout-btn">Checkout</button>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(cartDrawer);
        
        // Event listeners
        cartDrawer.querySelector('.cart-drawer-close').addEventListener('click', closeCartDrawer);
        cartDrawer.querySelector('.cart-drawer-overlay').addEventListener('click', closeCartDrawer);
        cartDrawer.querySelector('.checkout-btn').addEventListener('click', function() {
            window.location.href = '/checkout';
        });
        
        return cartDrawer;
    }
    
    function openCartDrawer() {
        let cartDrawer = document.querySelector('.cart-drawer');
        if (!cartDrawer) {
            cartDrawer = createCartDrawer();
        }
        
        // Fetch current cart data
        fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
            updateCartDrawerContent(cart);
            cartDrawer.classList.add('active');
            document.body.classList.add('cart-open');
        });
    }
    
    function closeCartDrawer() {
        const cartDrawer = document.querySelector('.cart-drawer');
        if (cartDrawer) {
            cartDrawer.classList.remove('active');
            document.body.classList.remove('cart-open');
        }
    }
    
    function updateCartDrawerContent(cart) {
        const cartDrawer = document.querySelector('.cart-drawer');
        if (!cartDrawer) return;
        
        const itemsContainer = cartDrawer.querySelector('.cart-drawer-items');
        const totalContainer = cartDrawer.querySelector('.cart-total');
        
        if (cart.items.length === 0) {
            itemsContainer.innerHTML = '<p class="empty-cart">Your cart is empty</p>';
            totalContainer.innerHTML = '';
        } else {
            itemsContainer.innerHTML = cart.items.map(item => `
                <div class="cart-item" data-line="${item.key}">
                    <img src="${item.featured_image.url}" alt="${item.product_title}" class="cart-item-image">
                    <div class="cart-item-details">
                        <h4 class="cart-item-title">${item.product_title}</h4>
                        <p class="cart-item-variant">${item.variant_title}</p>
                        <div class="cart-item-quantity">
                            <button class="quantity-btn minus" data-line="${item.key}">-</button>
                            <span class="quantity">${item.quantity}</span>
                            <button class="quantity-btn plus" data-line="${item.key}">+</button>
                        </div>
                    </div>
                    <div class="cart-item-price">
                        <span class="price">${formatMoney(item.final_line_price)}</span>
                        <button class="remove-item" data-line="${item.key}">&times;</button>
                    </div>
                </div>
            `).join('');
            
            totalContainer.innerHTML = `
                <div class="cart-subtotal">
                    <span>Subtotal: ${formatMoney(cart.total_price)}</span>
                </div>
                <div class="cart-shipping">
                    <small>Shipping calculated at checkout</small>
                </div>
            `;
        }
        
        // Add event listeners for quantity changes and item removal
        cartDrawer.querySelectorAll('.quantity-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const line = this.dataset.line;
                const isPlus = this.classList.contains('plus');
                updateCartItemQuantity(line, isPlus ? 1 : -1);
            });
        });
        
        cartDrawer.querySelectorAll('.remove-item').forEach(btn => {
            btn.addEventListener('click', function() {
                const line = this.dataset.line;
                removeCartItem(line);
            });
        });
    }
    
    function updateCartItemQuantity(line, change) {
        const updates = {};
        updates[line] = change;
        
        fetch('/cart/change.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ updates })
        })
        .then(response => response.json())
        .then(cart => {
            updateCartDrawerContent(cart);
            updateCartCount();
        });
    }
    
    function removeCartItem(line) {
        const updates = {};
        updates[line] = 0;
        
        fetch('/cart/change.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ updates })
        })
        .then(response => response.json())
        .then(cart => {
            updateCartDrawerContent(cart);
            updateCartCount();
            showCartNotification('Item removed from cart');
        });
    }
    
    // Cart icon click handler
    document.addEventListener('click', function(e) {
        if (e.target.closest('.cart-icon') || e.target.closest('.cart-toggle')) {
            e.preventDefault();
            openCartDrawer();
        }
    });
    
    // ================================
    // ERROR HANDLING & FALLBACKS
    // ================================
    
    // Handle errors gracefully
    window.addEventListener('error', function(e) {
        console.error('JavaScript error:', e.error);
        
        // Track errors in Shopify analytics
        if (typeof gtag !== 'undefined') {
            gtag('event', 'exception', {
                description: e.error.message,
                fatal: false
            });
        }
    });
    
    // Handle unhandled promise rejections
    window.addEventListener('unhandledrejection', function(e) {
        console.error('Unhandled promise rejection:', e.reason);
        e.preventDefault();
    });
    
    // Fallback for older browsers that don't support IntersectionObserver
    if (!('IntersectionObserver' in window)) {
        const cards = document.querySelectorAll('.service-card, .car-card, .category-card, .product-card, .collection-card');
        cards.forEach((card, index) => {
            setTimeout(() => {
                card.classList.add('animate-in');
            }, index * 100);
        });
    }
    
    // ================================
    // ADDITIONAL MOBILE ENHANCEMENTS
    // ================================
    
    // Prevent zoom on input focus (iOS Safari)
    const inputs = document.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
        input.addEventListener('focus', function() {
            // Set font-size to 16px or larger to prevent zoom
            if (this.style.fontSize === '' || parseInt(this.style.fontSize) < 16) {
                this.style.fontSize = '16px';
            }
        });
    });
    
    // Handle iOS Safari viewport issues
    function handleIOSViewport() {
        if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
            const viewport = document.querySelector('meta[name=viewport]');
            if (viewport) {
                viewport.content = 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no';
            }
        }
    }
    
    handleIOSViewport();
    
    // ================================
    // ACTIVE SECTION HIGHLIGHTING
    // ================================
    
    function updateActiveNavItem() {
        const sections = document.querySelectorAll('section[id]');
        const navLinks = document.querySelectorAll('.nav-menu a, .mobile-nav-links a');
        
        let currentSection = '';
        
        sections.forEach(section => {
            const sectionTop = section.offsetTop - 100;
            const sectionHeight = section.clientHeight;
            
            if (window.pageYOffset >= sectionTop && 
                window.pageYOffset < sectionTop + sectionHeight) {
                currentSection = section.getAttribute('id');
            }
        });
        
        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${currentSection}`) {
                link.classList.add('active');
            }
        });
    }
    
    // Add active section highlighting to scroll event
    let activeSectionTicking = false;
    window.addEventListener('scroll', function() {
        if (!activeSectionTicking) {
            requestAnimationFrame(function() {
                updateActiveNavItem();
                activeSectionTicking = false;
            });
            activeSectionTicking = true;
        }
    });
    
    // ================================
    // HERO IMAGE LOADING OPTIMIZATION
    // ================================
    
    function optimizeHeroImages() {
        const heroImages = document.querySelectorAll('.hero-image');
        let loadedImages = 0;
        
        heroImages.forEach((img, index) => {
            if (img.complete) {
                loadedImages++;
            } else {
                img.addEventListener('load', function() {
                    loadedImages++;
                    if (loadedImages === heroImages.length) {
                        setTimeout(matchHeroHeights, 100);
                    }
                });
            }
        });
        
        if (loadedImages === heroImages.length) {
            setTimeout(matchHeroHeights, 100);
        }
    }
    
    optimizeHeroImages();
    
    // ================================
    // SHOPIFY THEME EDITOR INTEGRATION
    // ================================
    
    {% if request.design_mode %}
    // Theme editor specific functionality
    document.addEventListener('shopify:section:load', function(event) {
        // Reinitialize components when sections are loaded in theme editor
        setTimeout(() => {
            matchHeroHeights();
            detectDevice();
            lazyLoadImages();
            updateCartCount();
        }, 100);
    });
    
    document.addEventListener('shopify:section:unload', function(event) {
        // Cleanup when sections are unloaded
        hideSearchSuggestions();
        closeMobileMenu();
        closeCartDrawer();
    });
    
    document.addEventListener('shopify:section:select', function(event) {
        // Handle section selection in theme editor
        const sectionId = event.detail.sectionId;
        const section = document.querySelector(`[data-section-id="${sectionId}"]`);
        if (section) {
            section.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    });
    {% endif %}
    
    // ================================
    // CONSOLE LOG FOR DEBUGGING
    // ================================
    
    console.log('🏁 Nightmare Racing Shopify JavaScript Loaded Successfully!');
    console.log('🛍️ Shopify Integration Active');
    console.log('📱 Device Detection Active');
    console.log('🔧 Mobile Menu Initialized');
    console.log('✨ Touch Gestures Enabled');
    console.log('🛒 Cart Functionality Ready');
    console.log('💝 Wishlist System Active');
    console.log('🔍 Search with Autocomplete Ready');
    console.log('🎯 All Interactive Elements Ready');
    console.log('🚀 Performance Optimizations Applied');
    console.log('📐 Hero Height Matching Enabled');
    
    // Shopify-specific logging
    console.log('Shopify Configuration:');
    console.log('- Shop:', shopifyConfig.shopName);
    console.log('- Currency:', shopifyConfig.currency);
    console.log('- Customer:', shopifyConfig.customer ? 'Logged in' : 'Guest');
    console.log('- Collections:', shopifyConfig.collections.length);
    console.log('- Design Mode:', shopifyConfig.designMode);
    
    // Feature detection logging
    console.log('Feature Support:');
    console.log('- IntersectionObserver:', 'IntersectionObserver' in window);
    console.log('- Touch Events:', 'ontouchstart' in window);
    console.log('- Service Worker:', 'serviceWorker' in navigator);
    console.log('- Local Storage:', 'localStorage' in window);
    console.log('- Fetch API:', 'fetch' in window);
    
    // ================================
    // INITIALIZATION COMPLETE
    // ================================
    
    // Mark initialization as complete
    document.body.classList.add('js-loaded');
    document.body.classList.add('shopify-ready');
    
    // Optional: Remove loading states or show content
    setTimeout(() => {
        document.body.classList.add('fully-loaded');
        matchHeroHeights();
        updateCartCount();
    }, 300);
    
    // Additional load event listener for final adjustments
    window.addEventListener('load', function() {
        setTimeout(() => {
            matchHeroHeights();
            updateCartCount();
        }, 500);
    });
    
    // ================================
    // SHOPIFY ANALYTICS INTEGRATION
    // ================================
    
    // Enhanced analytics tracking for Shopify
    function trackPageView() {
        if (typeof gtag !== 'undefined') {
            gtag('config', 'GA_MEASUREMENT_ID', {
                page_title: document.title,
                page_location: window.location.href,
                custom_map: {
                    'shop_name': shopifyConfig.shopName,
                    'customer_type': shopifyConfig.customer ? 'logged_in' : 'guest'
                }
            });
        }
    }
    
    // Track scroll depth
    let scrollDepthTracked = [];
    
    function trackScrollDepth() {
        const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
        const milestones = [25, 50, 75, 90];
        
        milestones.forEach(milestone => {
            if (scrollPercent >= milestone && !scrollDepthTracked.includes(milestone)) {
                scrollDepthTracked.push(milestone);
                
                if (typeof gtag !== 'undefined') {
                    gtag('event', 'scroll', {
                        event_category: 'engagement',
                        event_label: `${milestone}%`,
                        value: milestone
                    });
                }
            }
        });
    }
    
    // Add scroll depth tracking to scroll event
    let scrollDepthTicking = false;
    window.addEventListener('scroll', function() {
        if (!scrollDepthTicking) {
            requestAnimationFrame(function() {
                trackScrollDepth();
                scrollDepthTicking = false;
            });
            scrollDepthTicking = true;
        }
    });
    
    // Initial page view tracking
    trackPageView();
    
});